(in-package :stumpwm)
(run-shell-command "feh --bg-center ~/Pictures/Sfondi/Berserk/sed-boh-armour.jpg")

(define-key *root-map* (kbd "e") "exec stallman")
(setf *ignore-wm-inc-hints* t)

(setf *mouse-focus-policy* :click)

;; some keymaps and how to reach them
;; terminal
(define-key *top-map* (kbd "s-RET") "exec st -e zsh")
;; key I'm never going to use, but might need if shit starts flying
(define-key *top-map* (kbd "s-z") "eval")

;; custom keymaps for /branching/
;; this shit's screaming to be macro'd
(defvar *muh-launchers-keymap*
  (let ((m (make-sparse-keymap)))
	(define-key m (kbd "d") "exec promptu")
	(define-key m (kbd "r") "exec rofi -combi-modi drun,combi -show combi")
	(define-key m (kbd "l") "exec")
	(define-key m (kbd "e") "eval")
	m))
(define-key *root-map* (kbd "l") '*muh-launchers-keymap*)
;; C- doesn't seem to work too well with the italian layouts
;; so I'll keep these as backup
(define-key *top-map* (kbd "s-p") "exec dmenu_run") ;exec does NOT work with italian
(define-key *top-map* (kbd "s-o") "exec promptu")

(defvar *muh-screenshot-keymap*
  (let ((m (make-sparse-keymap)))
	(define-key m (kbd "s") "exec scrot -s")
	(define-key m (kbd "c") "exec screenclip")
  m))
(define-key *root-map* (kbd "s") '*muh-screenshot-keymap*)

(grename "EMACS")
(gnewbg "WEB")
(gnewbg "DOCS")
(gnewbg "FILE")
(gnewbg "ARTIS-GRATIA")

;; vi vi vi, the editor of the beast
(define-interactive-keymap move-vi
  nil
  ((kbd "h") "move-focus left")
  ((kbd "j") "move-focus down")
  ((kbd "k") "move-focus up")
  ((kbd "l") "move-focus right"))
(define-key *top-map* (kbd "M-j") "move-vi")

(define-interactive-keymap pull-vi
  nil
  ((kbd "j") "pull-hidden-next")
  ((kbd "k") "pull-hidden-previous"))
(define-key *top-map* (kbd "M-k") "pull-vi")

(define-interactive-keymap workspaces
  nil
  ((kbd "s") "grouplist")
  ((kbd "e") "gselect EMACS")
  ((kbd "w") "gselect WEB")
  ((kbd "d") "gselect DOCS")
  ((kbd "f") "gselect FILE")
  ((kbd "a") "gselect ARTIS-GRATIA")
  ((kbd "h") "gprev")
  ((kbd "l") "gnext")

  ((kbd "C-e") "gmove EMACS")
  ((kbd "C-w") "gmove WEB")
  ((kbd "C-d") "gmove DOCS")
  ((kbd "C-f") "gmove FILE")
  ((kbd "C-a") "gmove ARTIS-GRATIA")
  ((kbd "C-l") "gnext-with-window")
  ((kbd "C-h") "gprev-with-window"))

(define-key *top-map* (kbd "M-l") "workspaces")
(define-key *root-map* (kbd "w") "workspaces")

;; this has to mimic emacs
;; EVEN FURTHER BEYOND!!
(define-key *root-map* (kbd "0") "remove")
(define-key *root-map* (kbd "1") "fullscreen")
(define-key *root-map* (kbd "2") "vsplit")
(define-key *root-map* (kbd "3") "hsplit")

;; basic brightness volume et al bullshit
(define-key *top-map* (kbd "XF86MonBrightnessUp") "exec light -A 0.5")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "exec light -U 0.5")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer -q set Master toggle")

(define-key *root-map* (kbd "b") "mode-line")

;;; slynk
;;; I don't know how to lazy load, uncomment and reeval (loadrc) when fucking around live

(ql:quickload :slynk)
(let ((slynk-port 4005))
  (defcommand slynk () ()
			  (sb-thread:make-thread
			   (lambda ()
				 (slynk:create-server :port slynk-port :dont-close t)
				 (echo-string
				  (current-screen)
				  "started slynk server, run M-x sly-connect and then (in-package :stumpwm) inside the sly repl"))
			   :name "slynk-manual")))
(define-key *root-map* (kbd "C-s") "slynk")

(let ((black "#000000")
      (dark-gary "#777777")
      (light-gary "#999999")
      (dark-blue "#112233")
      (white "#ffffff"))
  (setf *mode-line-background-color* dark-blue
	*mode-line-foreground-color* white
	*mode-line-border-color* black
	*mode-line-border-width* 0)
  (set-border-color dark-gary)
  (set-focus-color light-gary)
  (set-unfocus-color dark-gary)
  (set-float-focus-color light-gary)
  (set-float-unfocus-color dark-gary))

(let ((universal-width 2))
  (setf *normal-border-width* universal-width
	*float-window-border* universal-width))

;; https://github.com/stumpwm/stumpwm/wiki/Modules
(load-module "swm-gaps")
;; https://config.phundrak.com/stumpwm.html
(setf swm-gaps:*head-gaps-size* 0
      swm-gaps:*inner-gaps-size* 4
      swm-gaps:*outer-gaps-size* 4)

(defun see-changed-colors ()
  (mode-line)
  (mode-line)
  (update-color-map (current-screen)))
(defun see-changed-gaps ()
  (swm-gaps:toggle-gaps)
  (swm-gaps:toggle-gaps))

(when *initializing*
  (update-color-map (current-screen))
  (swm-gaps:toggle-gaps))

(mode-line)

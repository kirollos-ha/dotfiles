#+title: Ita fac, mi Lucili
#+property: header-args:emacs-lisp :tangle ../init.el

* Pacchetti
** Manager
il normalissimo =package.el= funziona abbastanza bene per adesso

#+begin_src emacs-lisp
(require 'package)
#+end_src

*** =package-archives=
=nongnu= aggiunto per package quali =geiser= che non sono su =melpa=
#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
#+end_src

*** Inizio
#+begin_src emacs-lisp
  (package-initialize)
#+end_src

** Lista Pacchi
al momento non sono pienamente convertito a =use-package=
operazioni da fare su tutti i pacchetti richiedono quindi codeste bestemmie
#+begin_src emacs-lisp
  (setq muh-packages '(;; required by evil mode on newer emacsen
					   undo-tree
					   undo-fu
					   goto-last-change
					   ;; fundamental
					   evil
					   neotree
					   ;; almost fundamental
					   flycheck
					   auto-complete
					   ;; colours
					   color-theme-modern
					   dracula-theme
					   solarized-theme
					   color-theme-modern
					   ef-themes
					   ;; some other 9001 installed here and not listed
					   ;; ides
					   sly
					   ;; geiser
					   ;; geiser-racket
					   ;; geiser-guile
					   ess
					   ediprolog
					   auctex
					   ;; language support
					   sxhkdrc-mode ;(not supported in older emacsen)
					   ;; utilities
					   beacon
					   ;; and this is where things get get stupid
					   yasnippet
					   yasnippet-snippets
					   company
					   olivetti
					   all-the-icons
					   treemacs
					   ))
#+end_src

** Aggiornamenti
per gestire/aggiornare/reinstallare pacchetti si definisce la seguente utility
#+begin_src emacs-lisp
(defun potential-reinstall ()
  "look at all the packages again, installing whatever is in the list you didn't install"
  (interactive)
  (package-refresh-contents)
  (dolist (pkg muh-packages)
	(unless (package-installed-p pkg)
	  (package-install pkg))))

#+end_src

** Config specifiche di pacchi
(questa è la parte che mi s'inculerà poi con use package)
*** Quelli base
**** Evil mode
l'unica cosa da considerare veramente qui è il =evil-disable-insert-state-bindings=
settarlo a =t= vuol dire che la insert mode non fa override di shortcut per il muovimento, permettendo di usare quelle default di emacs in inser mode, e quelle di vim in normal mode

da settare prima di fare il =require=, per qualche motivo, ipse dixit i doc
#+begin_src emacs-lisp
(setq evil-disable-insert-state-bindings t)
(require 'evil)
(setq evil-esc-delay 0.0)
(evil-mode 1)
(evil-normal-state)
#+end_src

**** Neotree
neotree esiste, non fa molto altro
non so manco che fa =neotree-smart-open=, ma sembra comodo
#+begin_src emacs-lisp
(require 'neotree)
(setq neotree-smart-open t)
#+end_src

*** Autocompletamento
**** Per il language server
***** Lsp Mode
vedi [[lspvars]] per variabili globali di emacs settate per far funzionare +sta merda+
***** Eglot
eglot è bellino quando capisce subito che server usare e non devi configurare un cazzo, notare il *quando*
#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (progn
    (add-to-list 'eglot-server-programs
		 '(racket-mode . ("racket" "-l" "racket-langserver")))
    (add-to-list 'eglot-server-programs
		 '(js-mode . ("npx" "typescript-language-server" "--stdio")))))
#+end_src
**** Per l'interfaccia bellina
***** Company
company viene settata globalmente, il =company-minimum-prefix= messo basso serve per qando non so cosa fare e uso l'autocompleta come documentazione del linguaggio
#+begin_src emacs-lisp
(require 'company)
(add-hook 'after-init-hook  'global-company-mode)
(setq company-miminum-prefix-length 3)
#+end_src
****** Rebinding
visto che avere =RET= per l'autocompeltamento a volte rompe i coglioni, (e lode a [[https://emacs.stackexchange.com/questions/13286/][stack overflow]])
#+begin_src emacs-lisp
(with-eval-after-load 'company
  (define-key company-active-map (kbd "<return>") nil)
  (define-key company-active-map (kbd "RET") nil)
  (define-key company-active-map (kbd "<tab>") 'company-complete-selection))
#+end_src

*** Yasnippet
yasnippet non c'ha molta roba da settare
#+begin_src emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+end_src

*** Altre cazzatine
#+begin_src emacs-lisp
(require 'ess)
(setq ac-use-quick-help nil)

(require 'beacon)
(beacon-mode 1)
#+end_src

* Per linguaggi/ scrittura
** Org mode
(parte di queste configurazioni sono state rubate spudoratamete da [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][qui]]
*** Per poter scrivere decentemente
emacs ha questa mania per avere impostazioni default che fanno cagare il cazzo
ai fini di raggiungere una mezza parità feautre con blocco note è quindi necessario specificare il seguente
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
						   (progn
							 (visual-line-mode)
							 (word-wrap-whitespace-mode)
							 (org-bullets-mode))))
#+end_src
*** Due cosine per l'export a latex
#+begin_src emacs-lisp
(add-to-list 'org-preview-latex-process-alist 'dvipng)
#+end_src
*** Babel
**** Require
org babel ha i suoi pacchetti che non sono richesti di default quando si usa org
#+begin_src emacs-lisp
(require 'org-tempo)
(require 'ob-python)
(require 'ob-lisp)
(require 'ob-scheme)
#+end_src

**** Per i listing di codice
è inoltre abbastanza importante specificare in che mode sono
(parzialmente rubato da [[https://plantuml.com/emacs][qui]])
#+begin_src emacs-lisp
  (setq org-plantuml-jar-path (expand-file-name "/home/diccu/uml/plantuml.jar")) 
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (add-to-list 'org-src-lang-modes '("lisp" . lisp))
  (add-to-list 'org-src-lang-modes '("python" . python))
  (add-to-list 'org-src-lang-modes '("scheme" . scheme))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (plantuml . t)
     (python . t)
     (lisp . t)
     (scheme . t)))
#+end_src

**** Per la valutazione dei listing
funziona tutto abbastanza bene, ma quella di common lisp usa slime di default, visto che ho installato =sly= si specifica fare con =sly=
#+begin_src emacs-lisp
(setq org-babel-lisp-eval-fn 'sly-eval)
#+end_src

*** Scelte stilistiche

** LaTeX
commenterei sta parte ma l'ho copiata da verbatim da https://www.emacswiki.org/emacs/AUCTeX
#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  ;; quando capisco come funziona per non anglofoni
  ;;(add-hook 'LaTeX-mode-hook 'flyspell-mode) 
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+end_src
*** Traumi con windows
#+begin_src emacs-lisp
  (modify-coding-system-alist 'file "\\.tex\\'" 'utf-8)
  #+end_src

** Altro
#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
  (setq scheme-program-name "guile3.0") ;; per racket c'è racket mode

  (setq prolog-system 'swi)
#+end_src

* Funzioni custom
** Docsfag
funzioni create al fine di
 - posso scaricare i doc in html
 - posso leggere gli html da emacs
 - il css è per deboli
#+begin_src emacs-lisp
(defun docsfag-rust()
  (interactive)
  (eww-open-file "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/doc/rust/html/book/index.html"))

(defun docsfag-cmake()
  (interactive)				;
  (eww-open-file "/home/diccu/Documents/lang/cmake/mastering-cmake/bild/html/index.html"))

(defun docsfag-sicp()
  (interactive)				;
  (eww-open-file "/home/diccu/Documents/lang/lisp/book/book.html"))
#+end_src
** Yasnippet
questa chimera serve a scrivere pezzi di LaTeX più in fretta dando delle shorthand ed espandendole in snippet
avrei potuto farlo dichiarando tutti i suddetti snippet, ci ho provato e più o meno funziona, ma questo permette una flessibilità (e abuso) molto maggiore, in quanto gli snippet vengono generati a runtime prima di essere espansi

il funzionamento della chimera segue il seguente processo
- si hanno dei caratteri, ogni carattere è associato a un simbolo latex e a un arg count
- si da la lista di caratteri
- ogni carattere dato viene espanso in un sottosnippet con quel simbolo e quel tot di argomenti
- i sottosnippet sono messi tutti insieme e dati in pasto a =yas-expand-snippet=

qualora si disponga di un set di questi sottosnippet si potrebbe allora
 - prenderne uno dato il carattere associato
 - prenderne il simbolo
 - prenderne l'arg count

si supponga come set di snippet il seguente
#+begin_src emacs-lisp
  (setq *snippet-shorthand-list*
        '((?b "\\mathbb" . 1)
          (?c "\\mathcal" . 1)
          (?f "\\frac" . 2)
          (?s "\\sum" . 0)
          (?l "\\lim" . 0)
          (?i "\\int" . 0)
          (?d "_" . 1)    ;down
          (?u "^" . 1)))  ;up
#+end_src

allora per fare le funzioni sopra dette basterebbe
#+begin_src emacs-lisp
  (defun subsnippet-from-char (c) (assoc c *snippet-shorthand-list*))
  (defun subsnippet-symbol (s) (cadr s))
  (defun subsnippet-arg-count (s) (cddr s))
#+end_src

per l'espansione di shorthand si usa la seguente funzione
#+begin_src emacs-lisp
  (defun create-snippet-from-shorthand (short)
    "the short arg is a shorthand for a snippet, retuns a yasnippet snippet created from the shorthand"
    ;; input cleanup
    (setq short (string-clean-whitespace short))
    ;; now expand every char of the shorthand
    ;; some initial setting
    (let ((s-len (length short))
          (acc "")
          (index-in-snippet 1))
      ;; then iterate every char of the shorthand
      ;; appending the expansion to an accumulator
      (dotimes (i s-len)
        (let* ((c (aref short i))
               (ss (subsnippet-from-char c))
               (s-sym (subsnippet-symbol ss))
               (s-argc (subsnippet-arg-count ss)))
          (setq acc (concat acc s-sym))
          (dotimes (x s-argc)
            (setq acc (concat acc "{$" (number-to-string index-in-snippet) "}"))
            (setq index-in-snippet (1+ index-in-snippet)))))
      (concat acc "$0")))
#+end_src

** Per colori
cuasa indecisione cronica cambio temi di colore almeno 3 volte a seduta
per facilitare la cosa, visto che di default settare un tema non unsetta gli altri, l'ho dovuto fare io
#+begin_src emacs-lisp
  (defun disable-all-themes ()
    (dolist (th custom-enabled-themes)
      (disable-theme th)))

  (defun change-theme-nonint (themesym)
    (disable-all-themes)
    (load-theme themesym t))

  (defun change-theme ()
    (interactive)
    (let ((themestr (completing-read
                     "Change to custom theme : "
                     (mapcar #'symbol-name (custom-available-themes)))))
      (change-theme-nonint (intern themestr))))
#+end_src

la versione =nonint= di =change-theme= è stata definita ai fini di poterla usare in modo "batch" all'interno di altre funzioni, due di queste sono per
*** comandi per light e dark mode
dati due temi
#+begin_src emacs-lisp
  (setq muh-light-theme 'ef-trio-light)
  (setq muh-dark-theme 'ef-trio-dark)
#+end_src

si definiscono
#+begin_src emacs-lisp
  (defun going-light () (interactive) (change-theme-nonint muh-light-theme))
  (defun going-dark () (interactive) (change-theme-nonint muh-dark-theme))
#+end_src

** Altre
*** =nuke-all-buffers=
copiata da [[https://stackoverflow.com/questions/13981899/how-can-i-kill-all-buffers-in-my-emacs][stack overflow]] come soluzione nucleare a cazzatine da daemon
#+begin_src emacs-lisp
  (defun nuke-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))
    (delete-other-windows))
#+end_src

* Temi e colori
** Font
mi piace jetbrains mono
ha un non so che di nostalgico per quando usavo ancora programmi che funzionavano e basta
#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "JetBrains Mono" :height 130)
#+end_src

ci sarebbe inoltre questa cosa, che si fotte un po' quando cambio tema (grazie prot)
#+begin_src emacs-lisp
  (defun org-like-em-big ()
    (interactive)
    (set-face-attribute 'org-level-1 nil :height 2.00)
    (set-face-attribute 'org-level-2 nil :height 1.75)
    (set-face-attribute 'org-level-3 nil :height 1.50)
    (set-face-attribute 'org-level-4 nil :height 1.25))

  (org-like-em-big)
#+end_src
** Finestra
emacs non ha un widget che non sembri uscito da windows xp, niente che valga la pena di sprecare preziose righe di pixel
per evitare client side rendering, che con emacs fa cagare, vi è
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(undecorated . t))
#+end_src
altre variabili contro l'utilizzo di gui sono ritrovabili [[better][di sotto]]
** Colori
si inizia settando il tema
#+begin_src emacs-lisp
  (going-dark)
#+end_src

oltre al tema "default" usato sono inoltre utilizzati anche i temi
#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t)

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-zenburn-brighter-comments t
          doomt-themes-enable-italic t))
 #+end_src
dai repository di emacs,
e i temi
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/everforest-theme")
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/rose-pine-emacs")
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+end_src
presi alla cazzo da github

* Binding
** Evil leader
<<leader>>
#+begin_src emacs-lisp
  (evil-set-leader 'normal (kbd "SPC"))
  (evil-set-leader 'insert (kbd "M-SPC"))
#+end_src
** Per gusto personale
*** Navigazione finestre
#+begin_src emacs-lisp
  (global-set-key "\M-w" 'shell-command)
  (global-set-key "\M-W" 'async-shell-command)
  (evil-define-key 'normal 'global (kbd "<leader>w") 'shell-command)
  (evil-define-key 'normal 'global (kbd "<leader>W") 'async-shell-command)

  (global-set-key "\M-a" (lambda () (interactive) (other-window 1)))
  (global-set-key "\M-A" (lambda () (interactive) (other-window -1)))
  (evil-define-key 'normal 'global (kbd "<leader>a")
    (lambda () (interactive) (other-window 1)))
#+end_src
** Per cose di package
*** Neotree
**** Toggle
***** L'aborto
il toggle è stato un po' un parto da settare perchè sulla vecchia config ce l'avevo settato a =M-q=, ma poi =M-q= è in ogni minor mode a volre dire "indent region"
quindi qui ho un po' bestemmiato, e questo codice è un po' una bestemmia
#+begin_src emacs-lisp
  (with-eval-after-load 'c-mode
    (define-key c-mode-map (kbd "M-q") 'neotree-toggle))
  (with-eval-after-load 'c++-mode
    (define-key c++-mode-map (kbd "M-q") 'neotree-toggle))
  (with-eval-after-load 'java-mode
    (define-key java-mode-map (kbd "M-q") 'neotree-toggle))
  (with-eval-after-load 'python-mode
    (define-key python-mode-map (kbd "M-q") 'neotree-toggle))

  (with-eval-after-load 'lisp-mode
    (define-key lisp-mode-map (kbd "M-q") 'neotree-toggle))
  (with-eval-after-load 'scheme-mode
    (define-key scheme-mode-map (kbd "M-q") 'neotree-toggle))
  (with-eval-after-load 'emacs-lisp-mode
    (define-key emacs-lisp-mode-map (kbd "M-q") 'neotree-toggle))
  (with-eval-after-load 'typescript-mode
    (define-key typescript-mode-map (kbd "M-q") 'neotree-toggle))
#+end_src
***** E intanto
visto che il meccanismo di sopra è /molto/ volatile come funzionamento, mi tengo questo come fallback finchè non capisco come fare meglio i binding con priorità
(vale a dire finchè non mi metto a fare una minor mode mia che definisce sti binding e che viene rimessa in cima alla lista delle minor mode ogni cazzo di volta che ne carica una)
#+begin_src emacs-lisp
  (global-set-key "\C-q" 'neotree-toggle)
  (evil-define-key 'normal 'global (kbd "<leader>q") 'neotree-toggle)
#+end_src
**** Gestione albero
molto di vim
copie e incolli dalla wiki
#+begin_src emacs-lisp
  (evil-define-key 'normal neotree-mode-map (kbd "j") 'neotree-next-line)
  (evil-define-key 'normal neotree-mode-map (kbd "k") 'neotree-previous-line)
  (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-create-node)
  (evil-define-key 'normal neotree-mode-map (kbd "d") 'neotree-delete-node)

  (evil-define-key 'normal neotree-mode-map (kbd "r") 'neotree-rename-node)
  (evil-define-key 'normal neotree-mode-map (kbd "c") 'neotree-copy-node)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
  (evil-define-key 'normal neotree-mode-map (kbd "h") 'neotree-hidden-file-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
#+end_src

*** Altri
**** Ibuffer
#+begin_src emacs-lisp
  (global-set-key "\C-x\C-b" 'ibuffer)
#+end_src
**** Evil
vedere intanto [[leader]] per le key leader
visto che sono un po' troppo abituato a dove si trovano i =:= americani per il prompt di vim, e che la tastiera italiana li mette da tutt'altra parte
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global "ç" 'evil-ex)
#+end_src
** Per funzioni custom

* Variabili globali rifatte
** Preferenze personali
*** Generali
**** Quelle mie
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq ring-bell-function 'ignore)

  (setq tab-width 4)
  (setq scroll-conservatively most-positive-fixnum)
  (show-paren-mode t)
#+end_src
**** Quelle fottute da better defaults
<<better>>
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+end_src
*** Per programmazione in particolare
#+begin_src emacs-lisp
  (setq c-basic-offset 4)
  (setq python-indent-offset 4)
#+end_src
** Per l'LSP
<<lspvars>>
è purtroppo richiesto il settare una qualità ingente di merda, incluse variabili di sistema, ai fini di far funzionare decentemente il language server protocol su emacs (cazzo uno di sti giorni prendo astronvim e non mi rivedete)
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024))
(setq gc-cons-threshold 102400000)
#+end_src
